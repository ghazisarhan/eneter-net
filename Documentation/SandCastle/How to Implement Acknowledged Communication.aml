<?xml version="1.0" encoding="utf-8"?>
<topic id="cb91084a-03f6-44b4-9995-8d7d1f23e3eb" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
      The example shows how to use reliable messaging to receive the confirmation, that
      the sent message was delivered.
      The example implements a simple service receiving string messages and returning their size.
      </para>
    </introduction>
    
    <codeExample>
    
    Server side:
    <code language="C#">
using System;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.Composites.ReliableMessagingComposit;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace ReliableReceiver
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create TCP messaging.
            IMessagingSystemFactory aMessagingSystem = new TcpMessagingSystemFactory();

            // Create the composite providing the acknowledged communication.
            // Note: The maximum time, the confirmation about the delivery must be received is set to the default value 12 seconds.
            //       The serializer used to serialize the acknowledge messages is XmlStringSerializer (default serializer).
            IReliableMessagingFactory aReliableMessaging = new ReliableMessagingFactory(aMessagingSystem);

            // Create the duplex output channel sending messages and receiving response messages.
            IReliableDuplexInputChannel aReliableInputChannel = aReliableMessaging.CreateDuplexInputChannel("tcp://127.0.0.1:6788/");


            // Create sender, that will send 'string' messages and receive 'int' responses.
            // It will use the AES serializer.
            IReliableTypedMessagesFactory aTypedMessages = new ReliableTypedMessagesFactory();
            IReliableTypedMessageReceiver&lt;int, string&gt; aReliableReceiver = aTypedMessages.CreateReliableDuplexTypedMessageReceiver&lt;int, string&gt;();
            aReliableReceiver.MessageReceived += OnMessageReceived;
            aReliableReceiver.ResponseMessageDelivered += OnResponseMessageDelivered;
            aReliableReceiver.ResponseMessageNotDelivered += OnResponseMessageNotDelivered;

            // Attach the duplex input channel and start listening to messages.
            aReliableReceiver.AttachReliableInputChannel(aReliableInputChannel);

            Console.WriteLine("The service is running. Press ENTER to stop.");
            Console.ReadLine();

            // Stop listening to messages.
            aReliableReceiver.DetachReliableInputChannel();
        }

        static void OnMessageReceived(object sender, TypedRequestReceivedEventArgs&lt;string&gt; e)
        {
            IReliableTypedMessageReceiver&lt;int, string&gt; aReceiver = (IReliableTypedMessageReceiver&lt;int, string&gt;)sender;

            if (e.ReceivingError == null)
            {
                Console.WriteLine("Received message: {0}", e.RequestMessage);

                // Response the length of the string.
                int aLength = e.RequestMessage.Length;
                string aMessageId = aReceiver.SendResponseMessage(e.ResponseReceiverId, aLength);
                Console.WriteLine("Response message id: {0}", aMessageId);
            }
            else
            {
                Console.WriteLine("Receiving error: {0}", e.ReceivingError.Message);
            }
        }

        static void OnResponseMessageDelivered(object sender, MessageIdEventArgs e)
        {
            Console.WriteLine("Delivered response message: {0}", e.MessageId);
        }

        static void OnResponseMessageNotDelivered(object sender, MessageIdEventArgs e)
        {
            Console.WriteLine("Not delivered response message: {0}", e.MessageId);
        }
    }
}
    </code>
    
    Client side:
    <code language="C#">
using System;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.Composites.ReliableMessagingComposit;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace ReliableSender
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create TCP messaging.
            IMessagingSystemFactory aMessagingSystem = new TcpMessagingSystemFactory();

            // Create the composite providing the acknowledged communication.
            // Note: The maximum time, the confirmation about the delivery must be received is set to the default value 12 seconds.
            //       The serializer used to serialize the acknowledge messages is XmlStringSerializer (default serializer).
            IReliableMessagingFactory aReliableMessaging = new ReliableMessagingFactory(aMessagingSystem);

            // Create reliable duplex output channel.
            // Note: The reliable duplex output channel is the duplex output channel that can notify via the event
            //       if the sent message was delivered.
            IReliableDuplexOutputChannel aReliableOutputChannel = aReliableMessaging.CreateDuplexOutputChannel("tcp://127.0.0.1:6788/");

            // Create reliable sender, that will send 'string' messages and receive 'int' responses.
            IReliableTypedMessagesFactory aTypedMessages = new ReliableTypedMessagesFactory();
            IReliableTypedMessageSender&lt;int, string&gt; aReliableSender = aTypedMessages.CreateReliableDuplexTypedMessageSender&lt;int, string&gt;();
            aReliableSender.ResponseReceived += OnResponseReceived;
            aReliableSender.MessageDelivered += OnMessageDelivered;
            aReliableSender.MessageNotDelivered += OnMessageNotDelivered;

            // Attach the reliable output channel and start listening to response messages.
            aReliableSender.AttachReliableOutputChannel(aReliableOutputChannel);

            // Loop for the user input that will be sent.
            while (true)
            {
                Console.Write("Type string message: ");
                string aMessage = Console.ReadLine();

                // If the message is empty string then end.
                if (aMessage == string.Empty)
                {
                    break;
                }

                // Send the message and display the message id.
                string aMessageId = aReliableSender.SendRequestMessage(aMessage);
                Console.WriteLine("Sent message id: {0}", aMessageId);
            }

            // Stop listening to response messages.
            aReliableSender.DetachReliableOutputChannel();
        }

        static void OnResponseReceived(object sender, TypedResponseReceivedEventArgs&lt;int&gt; e)
        {
            if (e.ReceivingError == null)
            {
                Console.WriteLine("The length of the string is: {0}", e.ResponseMessage);
            }
            else
            {
                Console.WriteLine("Receiving error: {0}", e.ReceivingError.Message);
            }
        }

        static void OnMessageDelivered(object sender, MessageIdEventArgs e)
        {
            Console.WriteLine("Delivered message: {0}", e.MessageId);
        }

        static void OnMessageNotDelivered(object sender, MessageIdEventArgs e)
        {
            Console.WriteLine("Not delivered message: {0}", e.MessageId);
        }

        
    }
}
    </code>
    
    </codeExample>
    
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>