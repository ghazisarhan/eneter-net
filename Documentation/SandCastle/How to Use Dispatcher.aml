<?xml version="1.0" encoding="utf-8"?>
<topic id="18a24899-06a4-4756-97ce-18d853815b5b" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>
      The dispatcher is the component that receives messages from attached input channels and
      forwards them to all output channels.
      </para>
      <markup>
		<img src="../media/DispatcherOneWayCommunication.gif" width="100%"/>
	  </markup>
      
    </introduction>
    
    <codeExample>
    
    The dispatcher side:
    <code language="C#">
using System;
using System.Linq;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.Infrastructure.ConnectionProvider;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;
using Eneter.Messaging.MessagingSystems.ThreadPoolMessagingSystem;
using Eneter.Messaging.Nodes.Dispatcher;

namespace DispatcherServer
{
    internal class Performer
    {
        public Performer()
        {
            // Let's invoke performers with threads from the .Net pool.
            IMessagingSystemFactory anInternalMessagingSystem = new ThreadPoolMessagingSystemFactory();

            // Use this helper to reduce amount of coding to connect
            // the dispatcher and performers with channels.
            IConnectionProviderFactory aConnectionProviderFactory = new ConnectionProviderFactory();
            IConnectionProvider aConnectionProvider = aConnectionProviderFactory.CreateConnectionProvider(anInternalMessagingSystem);

            // Create the dispatcher
            IDispatcherFactory aDispatcherFactory = new DispatcherFactory();
            myDispatcher = aDispatcherFactory.CreateDispatcher();

            // Crete performers
            ITypedMessagesFactory aPerformerFactory = new TypedMessagesFactory();
            
            mySumCalculator = aPerformerFactory.CreateTypedMessageReceiver&lt;int[]&gt;();
            mySumCalculator.MessageReceived += OnSumCalculatorMessageReceived;
            aConnectionProvider.Connect(mySumCalculator, myDispatcher, "SumCalculator");

            myMaxValueCalculator = aPerformerFactory.CreateTypedMessageReceiver&lt;int[]&gt;();
            myMaxValueCalculator.MessageReceived += OnMaxValueCalculatorMessageReceived;
            aConnectionProvider.Connect(myMaxValueCalculator, myDispatcher, "MaxValueCalculator");

            myMinValueCalculator = aPerformerFactory.CreateTypedMessageReceiver&lt;int[]&gt;();
            myMinValueCalculator.MessageReceived += OnMinValueCalculatorMessageReceived;
            aConnectionProvider.Connect(myMinValueCalculator, myDispatcher, "MinValueCalculator");
        }


        public void StartReceiving()
        {
            // Let's dispatcher listen via Tcp
            IMessagingSystemFactory aMessagingFactory = new TcpMessagingSystemFactory();
            IInputChannel anInputChannel = aMessagingFactory.CreateInputChannel("tcp://127.0.0.1:8094/");

            // Connect the channel to the dispatcher and start to listen.
            myDispatcher.AttachInputChannel(anInputChannel);
        }

        private void OnSumCalculatorMessageReceived(object sender, TypedMessageReceivedEventArgs&lt;int[]&gt; e)
        {
            int aSum = 0;
            foreach (int k in e.MessageData)
            {
                aSum += k;
            }

            Console.WriteLine("Summary = " + aSum.ToString());
        }

        private void OnMaxValueCalculatorMessageReceived(object sender, TypedMessageReceivedEventArgs&lt;int[]&gt; e)
        {
            int aMax = e.MessageData.Max();
            Console.WriteLine("Max = " + aMax.ToString());
        }

        private void OnMinValueCalculatorMessageReceived(object sender, TypedMessageReceivedEventArgs&lt;int[]&gt; e)
        {
            int aMin = e.MessageData.Min();
            Console.WriteLine("Min = " + aMin.ToString());
        }


        private IDispatcher myDispatcher;

        private ITypedMessageReceiver&lt;int[]&gt; mySumCalculator;
        private ITypedMessageReceiver&lt;int[]&gt; myMaxValueCalculator;
        private ITypedMessageReceiver&lt;int[]&gt; myMinValueCalculator;
    }
}
    </code>
    
    The client side:
    <code language="C#">
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace DispatcherClient
{
    internal class Sender
    {
        public Sender()
        {
            // Create the message sender.
            ITypedMessagesFactory aTypedMessagesFactory = new TypedMessagesFactory();
            myMessageSender = aTypedMessagesFactory.CreateTypedMessageSender&lt;int[]&gt;();

            // Connect the sender to the output port.
            IMessagingSystemFactory aMessagingSystem = new TcpMessagingSystemFactory();
            IOutputChannel anOutputChannel = aMessagingSystem.CreateOutputChannel("tcp://127.0.0.1:8094/");

            myMessageSender.AttachOutputChannel(anOutputChannel);
        }

        public void SendMessage()
        {
            int[] aNumbers = {1,2,3,4,5,6,7,8,9,0};
            myMessageSender.SendMessage(aNumbers);
        }

        private ITypedMessageSender&lt;int[]&gt; myMessageSender;
    }
}
    </code>
    
    </codeExample>
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>