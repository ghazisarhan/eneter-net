<?xml version="1.0" encoding="utf-8"?>
<topic id="f40e508d-9ae8-45dc-96e7-462b9f1e9197" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>
      The example shows how to use the eneter framework for the communication
      between Silverlight application and Tcp server.
      </para>
    </introduction>
    
    <codeExample>
    
    Silverlight side:
    <code language="C#">
using System.Windows;
using System.Windows.Controls;
using Eneter.Messaging.EndPoints.StringMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;


namespace SilverlightAspTcpRequestResponse
{
    public partial class MainPage : UserControl
    {
        public MainPage()
        {
            InitializeComponent();
        }

        private void InitRequestResponseButton_Click(object sender, RoutedEventArgs e)
        {
            // Create the Tcp messaging for the communication with the server.
            IMessagingSystemFactory aMessagingSystemFactory = new TcpMessagingSystemFactory();
            IDuplexOutputChannel aDuplexOutputChannel = aMessagingSystemFactory.CreateDuplexOutputChannel("tcp://127.0.0.1:4531/");

            // Create duplex string message sender to send messages and receive responses.
            IDuplexStringMessagesFactory aStringRequestResponseFactory = new DuplexStringMessagesFactory();
            myStringRequester = aStringRequestResponseFactory.CreateDuplexStringMessageSender();
            myStringRequester.ResponseReceived += OnStringResponseReceived;
            myStringRequester.AttachDuplexOutputChannel(aDuplexOutputChannel);
        }

        private void RequestResponseButton_Click(object sender, RoutedEventArgs e)
        {
            myStringRequester.SendMessage("Hello request");
        }

        public void OnStringResponseReceived(object sender, StringResponseReceivedEventArgs e)
        {
            ReceiveTextBox.Text = e.ResponseMessage;
        }

        private IDuplexStringMessageSender myStringRequester;

    }
}
    </code>
    
    Tcp server side:
    <code language="C#">
using System;
using Eneter.Messaging.EndPoints.StringMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace TcpHelloWorldServer2
{
    class Program
    {
        static void Main(string[] args)
        {
            // Start the policy server to allow the communication between
            // the silverlight and the Tcp server.
            TcpPolicyServer aPolicyServer = new TcpPolicyServer(System.Net.IPAddress.Loopback);
            aPolicyServer.StartPolicyServer();

            // Create Tcp based messaging system for listening to messages.
            IMessagingSystemFactory aMessagingFactory = new TcpMessagingSystemFactory();
            IDuplexInputChannel anInputChannel = aMessagingFactory.CreateDuplexInputChannel("tcp://127.0.0.1:4531/");

            // Create duplex string message receiver to get messages and send responses.
            IDuplexStringMessagesFactory aStringMessagesFactory = new DuplexStringMessagesFactory();
            myStringResponser = aStringMessagesFactory.CreateDuplexStringMessageReceiver();
            myStringResponser.RequestReceived += OnStringRequestReceived;
            myStringResponser.ResponseReceiverConnected += OnStringResponseReceiverConnected;
            myStringResponser.ResponseReceiverDisconnected += OnStringResponseReceiverDisconnected;
            myStringResponser.AttachDuplexInputChannel(anInputChannel);
        }

        private static void OnStringResponseReceiverConnected(object sender, ResponseReceiverEventArgs e)
        {
            Console.WriteLine("Connected: " + e.ResponseReceiverId);
        }

        private static void OnStringRequestReceived(object sender, StringRequestReceivedEventArgs e)
        {
            Console.WriteLine("Request: " + e.RequestMessage);
            myStringResponser.SendResponseMessage(e.ResponseReceiverId, "Hello Client");
        }

        private static void OnStringResponseReceiverDisconnected(object sender, ResponseReceiverEventArgs e)
        {
            Console.WriteLine("Disconnected: " + e.ResponseReceiverId);
        }


        private static IDuplexStringMessageReceiver myStringResponser;
    }
}
    </code>
    
    </codeExample>
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>