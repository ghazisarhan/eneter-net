<?xml version="1.0" encoding="utf-8"?>
<topic id="208c8dd5-649f-4b92-b3c1-a7f88b0ee3d6" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
    <para>
    The example shows how to send and receive text messages.
    </para>
    <markup>
    	<img src="../media/StringOneWayCommunication.gif" width="100%"/>
    </markup>
   
    </introduction>
    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    <codeExample>
     <para>
     The receiver listens to string messages and display them on the console.
     </para>
     <code language="C#">
using System;
using Eneter.Messaging.EndPoints.StringMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.NamedPipeMessagingSystem;

namespace HelloWorldServer
{
    /// &lt;summary&gt;
    /// Implements the basic listener for string messages.
    /// &lt;/summary&gt;
    internal class HelloWorldReceiver
    {
        public HelloWorldReceiver()
        {
            // Create factory for string messaging.
            IStringMessagesFactory aStringMessagesFactory = new StringMessagesFactory();

            // Create receiver of string messages.
            myStringMessageReceiver = aStringMessagesFactory.CreateStringMessageReceiver();

            // Subscribe for events.
            myStringMessageReceiver.MessageReceived += OnMessageReceived;
        }

        public void StartListening()
        {
            // Create factory to create input channel based on Named Pipes
            IMessagingSystemFactory aMessagingSystemFactory = new NamedPipeMessagingSystemFactory();
            IInputChannel anInputChannel = aMessagingSystemFactory.CreateInputChannel("net.pipe://127.0.0.1/MyPipeName/");

            // Attach the input channel to the string message receiver and start listening.
            myStringMessageReceiver.AttachInputChannel(anInputChannel);
        }


        // Is called when a message was received.
        private void OnMessageReceived(object sender, StringMessageEventArgs e)
        {
            Console.WriteLine(e.Message);
        }


        private IStringMessageReceiver myStringMessageReceiver;
    }
}
     </code>
     
     <para>
     The sender sends the string messages.
     </para>
     <code language="C#">
using Eneter.Messaging.EndPoints.StringMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.NamedPipeMessagingSystem;

namespace HelloWorldClient
{
    internal class HelloWorldSender
    {
        public HelloWorldSender()
        {
            // Create factory for string messaging.
            IStringMessagesFactory aStringMessagesFactory = new StringMessagesFactory();

            // Create sender of string messages.
            myStringMessageSender = aStringMessagesFactory.CreateStringMessageSender();


            // Create factory to create input channel based on Named Pipes
            IMessagingSystemFactory aMessagingSystemFactory = new NamedPipeMessagingSystemFactory();
            IOutputChannel anOutputChannel = aMessagingSystemFactory.CreateOutputChannel("net.pipe://127.0.0.1/MyPipeName/");

            // Attach the output channel to the string message sender.
            myStringMessageSender.AttachOutputChannel(anOutputChannel);
        }

        public void SendMessage(string message)
        {
            myStringMessageSender.SendMessage(message);
        }

        private IStringMessageSender myStringMessageSender;
    }
}
     </code>
     
    </codeExample>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>