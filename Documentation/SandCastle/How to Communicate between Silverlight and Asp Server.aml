<?xml version="1.0" encoding="utf-8"?>
<topic id="a633abb5-837d-49eb-a902-46f82db1c8a1" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>
      The following example shows how to implement the communication
      between the Silverlight client and Asp.Net Server.
      </para>
    </introduction>
    
    <codeExample>
    
    Silverlight side:
    <code language="C#">
using System.Windows;
using System.Windows.Controls;
using Eneter.Messaging.DataProcessing.Serializing;
using Eneter.Messaging.MessagingSystems.HttpMessagingSystem;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.Nodes.Broker;

namespace SilverlightNotifiedFromAsp
{
    public partial class MainPage : UserControl
    {
        public MainPage()
        {
            InitializeComponent();

            // Create Http messaging for the specified message handler on the server side.
            myHttpMessagingFactory = new HttpMessagingSystemFactory(1000);
            string aChannelId = ServerUri.GetServerUri("/MessagingHandler.ashx");
            IDuplexOutputChannel aDuplexOutputChannel = myHttpMessagingFactory.CreateDuplexOutputChannel(aChannelId);


            // Create broker client to receive notifications from the server.
            IDuplexBrokerFactory aBrokerFactory = new DuplexBrokerFactory(new XmlStringSerializer());
            myBrokerClient = aBrokerFactory.CreateBrokerClient();
            myBrokerClient.BrokerMessageReceived += OnBrokerMessageReceived;
            myBrokerClient.AttachDuplexOutputChannel(aDuplexOutputChannel);
        }

        // Subscribes the broker receiver to get notifications from the server.
        private void SubscribeBtn_Click(object sender, RoutedEventArgs e)
        {
            string[] aMessageTypes = {"MyMessageType"};
            myBrokerClient.Subscribe(aMessageTypes);
        }


        // Unsubscribes the broker message receiver.
        private void UnsubscribeBtn_Click(object sender, RoutedEventArgs e)
        {
            myBrokerClient.Unsubscribe();
        }


        // Is called when the notification message from the broker is received.
        private void OnBrokerMessageReceived(object sender, BrokerMessageReceivedEventArgs e)
        {
            MessagesList.Items.Insert(0, e.Message);
        }


        private IMessagingSystemFactory myHttpMessagingFactory;
        private IDuplexBrokerClient myBrokerClient;
    }
}
    </code>
    
    Asp.Net Server side:
    <code language="C#">
using System;
using System.Timers;
using Eneter.Messaging.DataProcessing.Serializing;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.SynchronousMessagingSystem;
using Eneter.Messaging.Nodes.Bridge;
using Eneter.Messaging.Nodes.Broker;


namespace SilverlightNotifiedFromAsp.Web
{
    public class Global : System.Web.HttpApplication
    {

        protected void Application_Start(object sender, EventArgs e)
        {
            // MessagingSystem that will be used by the Silverlight-ASP messaging "bridge".
            //myServerMessagingSystem = new ThreadMessagingSystemFactory();
            myServerMessagingSystem = new SynchronousMessagingSystemFactory();

            // Create the duplex input channel for the broker.
            // Note: The broker will listen to this channel.
            IDuplexInputChannel aBrokerDuplexInputChannel = myServerMessagingSystem.CreateDuplexInputChannel("BrokerChannel");

            // Create broker.
            // Because we communicate with Silverlight it must be XmlSerialization.
            IDuplexBrokerFactory aBrokerFactory = new DuplexBrokerFactory(new XmlStringSerializer());
            myBroker = aBrokerFactory.CreateBroker();
            myBroker.AttachDuplexInputChannel(aBrokerDuplexInputChannel);

            // Create the duplex output channel for the client that will send notifications.
            IDuplexOutputChannel aClientDuplexOutputChannel = myServerMessagingSystem.CreateDuplexOutputChannel("BrokerChannel");

            // Create sender of notification messages.
            myBrokerClient = aBrokerFactory.CreateBrokerClient();
            myBrokerClient.AttachDuplexOutputChannel(aClientDuplexOutputChannel);

            // Create bridge to connect Silverligh with Asp
            IBridgeFactory aBridgeFactory = new BridgeFactory();
            myBridge = aBridgeFactory.CreateDuplexBridge(myServerMessagingSystem, "BrokerChannel");

            // Store the bridge to be used from MessagingHandler.ashx.cs
            Application["Bridge"] = myBridge;

            // Start timer generating notification messages.
            myTimer = new Timer(1000);
            myTimer.AutoReset = false;
            myTimer.Elapsed += OnTimerElapsed;
            myTimer.Start();
        }

        protected void Session_Start(object sender, EventArgs e){}

        protected void Application_BeginRequest(object sender, EventArgs e){}

        protected void Application_AuthenticateRequest(object sender, EventArgs e){}

        protected void Application_Error(object sender, EventArgs e){}

        protected void Session_End(object sender, EventArgs e){}

        protected void Application_End(object sender, EventArgs e){}


        
        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            ++myNumber;

            myBrokerClient.SendMessage("MyMessageType", myNumber);

            myTimer.Start();
        }



        private Timer myTimer;
        private int myNumber = -1;

        private IMessagingSystemFactory myServerMessagingSystem;

        private IDuplexBroker myBroker;
        private IDuplexBrokerClient myBrokerClient;

        private IDuplexBridge myBridge;

    }
}    


using System.Web;
using Eneter.Messaging.Nodes.Bridge;

namespace SilverlightNotifiedFromAsp.Web
{
    // Handles messaging communication with Silverlight clients.
    public class MessagingHandler : IHttpHandler
    {
        public void ProcessRequest(HttpContext context)
        {
            context.Application.Lock();
            
            // Get the bridge to the broker and process the incoming message.
            IDuplexBridge aBridge = context.Application["Bridge"] as IDuplexBridge;
            aBridge.ProcessRequestResponse(context.Request.InputStream, context.Response.OutputStream);
            
            context.Application.UnLock();
        }

        public bool IsReusable { get { return false; } }
    }
}
    </code>
    
    </codeExample>
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>