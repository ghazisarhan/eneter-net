<?xml version="1.0" encoding="utf-8"?>
<topic id="4df36e2e-281e-444f-a18b-837bf30bec14" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>
      The example shows how to use string messages in the request-response communication.
      The sender sends string messages and receives string response messages.
      The receiver gets string messages and responses string messages.
      </para>
      <markup>
    	<img src="../media/StringRequestResponseCommunication.gif" width="100%"/>
      </markup>
    </introduction>
    <!-- Optional procedures followed by optional code example but must have
         at least one procedure or code example -->
    
    <codeExample>
    The receiver listens to string messages and display them on the console.
    Then it sends back the simple response message.
    <code language="C#">
using System;
using Eneter.Messaging.EndPoints.StringMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.NamedPipeMessagingSystem;

namespace DuplexHelloWorldServer
{
    /// &lt;summary&gt;
    /// Implements the listener to string messages that is able to send back response messages.
    /// &lt;/summary&gt;
    internal class DuplexHelloWorldReceiver
    {
        public DuplexHelloWorldReceiver()
        {
            // Create factory for string messaging.
            IDuplexStringMessagesFactory aStringMessagesFactory = new DuplexStringMessagesFactory();

            // Create receiver of string messages.
            myStringMessageReceiver = aStringMessagesFactory.CreateDuplexStringMessageReceiver();

            // Subscribe for events.
            myStringMessageReceiver.RequestReceived += OnRequestReceived;
        }

        public void StartListening()
        {
            // Create factory to create input channel based on Named Pipes
            IMessagingSystemFactory aMessagingSystemFactory = new NamedPipeMessagingSystemFactory();
            IDuplexInputChannel anDuplexInputChannel = aMessagingSystemFactory.CreateDuplexInputChannel("net.pipe://127.0.0.1/MyPipeName/");

            // Attach the input channel to the string message receiver and start listening.
            myStringMessageReceiver.AttachDuplexInputChannel(anDuplexInputChannel);
        }


        private void OnRequestReceived(object sender, StringRequestReceivedEventArgs e)
        {
            Console.WriteLine(e.RequestMessage);

            if (e.RequestMessage != "bye")
            {
                // Send back the response message.
                myStringMessageReceiver.SendResponseMessage(e.ResponseReceiverId, "Thanks for " + e.RequestMessage);
            }
        }


        private IDuplexStringMessageReceiver myStringMessageReceiver;
    }
}

    </code>
    
    The sender sends the string messages and receives response messages.
    <code language="C#">
using System;
using Eneter.Messaging.EndPoints.StringMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.NamedPipeMessagingSystem;

namespace DuplexHelloWorldClient
{
    internal class DuplexHelloWorldSender
    {
        public DuplexHelloWorldSender()
        {
            // Create factory for string messaging.
            IDuplexStringMessagesFactory aStringMessagesFactory = new DuplexStringMessagesFactory();

            // Create sender of string messages.
            myStringMessageSender = aStringMessagesFactory.CreateDuplexStringMessageSender();

            // Subscribe to receive response messages.
            myStringMessageSender.ResponseReceived += OnResponseReceived;


            // Create factory to create input channel based on Named Pipes
            IMessagingSystemFactory aMessagingSystemFactory = new NamedPipeMessagingSystemFactory();
            IDuplexOutputChannel anOutputChannel = aMessagingSystemFactory.CreateDuplexOutputChannel("net.pipe://127.0.0.1/MyPipeName/");

            // Attach the output channel to the string message sender.
            myStringMessageSender.AttachDuplexOutputChannel(anOutputChannel);
        }

        public void SendMessage(string message)
        {
            myStringMessageSender.SendMessage(message);
        }

        public void Close()
        {
            // Stop the listening to response messages.
            myStringMessageSender.DetachDuplexOutputChannel();
        }

        private void OnResponseReceived(object sender, StringResponseReceivedEventArgs e)
        {
            Console.WriteLine(e.ResponseMessage);
        }

        private IDuplexStringMessageSender myStringMessageSender;
    }
}
    </code>
    </codeExample>
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>