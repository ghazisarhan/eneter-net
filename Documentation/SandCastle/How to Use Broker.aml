<?xml version="1.0" encoding="utf-8"?>
<topic id="f6b44c4e-d4fb-4db2-a81f-a706e6fc9831" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>
      The broker is the component that decouples message senders and receivers.
	  Clients can subscribe in the broker for receiving desired messages.
	  Clients can also send messages to the broker to be forwarded to subscribers.
	  (Clients have assumptions only about the broker and not about other receivers.)
      </para>
      <markup>
		<img src="../media/BrokerCommunication.gif" width="100%"/>
	  </markup>
      
    </introduction>
    
    <codeExample>
    
    The broker side:
    <code language="C#">
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;
using Eneter.Messaging.Nodes.Broker;

namespace BrokerServer
{
    internal class Broker
    {
        public Broker()
        {
            // Create the broker.
            IDuplexBrokerFactory aBrokerFactory = new DuplexBrokerFactory();
            myBroker = aBrokerFactory.CreateBroker();
        }

        public void StartBroker()
        {
            // The broker will receive messages via Tcp.
            IMessagingSystemFactory aMessagingSystemFactory = new TcpMessagingSystemFactory();
            IDuplexInputChannel aDuplexInputChannel = aMessagingSystemFactory.CreateDuplexInputChannel("tcp://127.0.0.1:8092/");

            // Attach the input channel to the broker and start listening.
            myBroker.AttachDuplexInputChannel(aDuplexInputChannel);
        }


        private IDuplexBroker myBroker;
    }
}

    </code>
    
    The broker client side:
    <code language="C#">
using System;
using System.Windows.Forms;
using Eneter.Messaging.DataProcessing.Serializing;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;
using Eneter.Messaging.Nodes.Broker;

namespace BrokerClient
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();

            // Create the broker client
            IDuplexBrokerFactory aBrokekerFactory = new DuplexBrokerFactory();
            myBrokerClient = aBrokekerFactory.CreateBrokerClient();
            
            // Observe Messages from the broker.
            myBrokerClient.BrokerMessageReceived += OnBrokerMessageReceived;
            

            // Let's use Tcp for the communication with the broker.
            IMessagingSystemFactory aMessagingSystem = new TcpMessagingSystemFactory();
            IDuplexOutputChannel aDuplexOutputChannel = aMessagingSystem.CreateDuplexOutputChannel("tcp://127.0.0.1:8092/");

            // Attach the channel to the broker client.
            myBrokerClient.AttachDuplexOutputChannel(aDuplexOutputChannel);

            // Subscribe in broker to receive chat messages.
            myBrokerClient.Subscribe("ChatMessageType");
        }

        private void myMessageRichTextBox_KeyUp(object sender, KeyEventArgs e)
        {
            if (e.KeyData == Keys.Return)
            {
                // Prepare the message for the broker.
                BrokerMessageData aMessage = new BrokerMessageData()
                {
                    Nick = myNickTextBox.Text,
                    Message = myMessageRichTextBox.Text
                };

                // Clean the UI control.
                myMessageRichTextBox.Clear();

                // Because the message is not a simple type it must be entered deserialized.
                // Note: The problem is the broker does not know our type of the message
                //       and so deserialization would faile in the broker!
                BinarySerializer aSerializer = new BinarySerializer();
                object aSerializedMessage = aSerializer.Serialize&lt;BrokerMessageData&gt;(aMessage);

                // Send the message to the broker.
                myBrokerClient.SendMessage("ChatMessageType", aSerializedMessage);
            }
        }

        private void myNickTextBox_TextChanged(object sender, EventArgs e)
        {
            myMessageRichTextBox.Enabled = myNickTextBox.Text != "";
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            myBrokerClient.DetachDuplexOutputChannel();
        }

        private void OnBrokerMessageReceived(object sender, BrokerMessageReceivedEventArgs e)
        {
            if (e.ReceivingError == null)
            {
                if (e.MessageTypeId == "ChatMessageType")
                {
                    // Deserialize the message data.
                    BinarySerializer aSerializer = new BinarySerializer();
                    BrokerMessageData aDeserializedMessage = aSerializer.Deserialize&lt;BrokerMessageData&gt;(e.Message);
                    if (aDeserializedMessage != null)
                    {
                        if (aDeserializedMessage.Nick != myNickTextBox.Text)
                        {
                            string aText = aDeserializedMessage.Nick + ": " + aDeserializedMessage.Message;
                            myConversationRichTextBox.AppendText(aText);
                        }
                    }
                }
            }
        }


        private IDuplexBrokerClient myBrokerClient;
    }
}
    
    </code>
    
    </codeExample>
    
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>