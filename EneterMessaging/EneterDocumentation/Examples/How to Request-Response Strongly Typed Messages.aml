<?xml version="1.0" encoding="utf-8"?>
<topic id="10a9ac12-1cc8-4980-8649-aff89288a48f" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>
      The example shows how to use strongly typed messages in the request-response
      communication.
      The sender sends strongly typed messages and receives strongly typed response messages.
      The receiver gets strongly typed messages and sends strongly typed responses.
      </para>
      <markup>
		<img src="../media/TypedRequestResponseCommunication.gif" width="100%"/>
	  </markup>
      
    </introduction>
    
    <codeExample>
      Simple service receiving messages via TCP. It receive request messages of type Person and sends back response message of type string.
	    <code language="C#">
using System;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace DuplexTypedMessageServer
{
    public class Person
    {
        public string Name { get; set; }
        public int NumberOfItems { get; set; }
    }

    internal class DuplexPersonReceiver
    {
        public DuplexPersonReceiver()
        {
            // Create duplex typed message receiver.
            // It receives request messages of type Person and responses string.
            IDuplexTypedMessagesFactory aDuplexTypedMessagesFactory = new DuplexTypedMessagesFactory();
            myMessageReceiver = aDuplexTypedMessagesFactory.CreateDuplexTypedMessageReceiver&lt;string, Person&gt;();
            myMessageReceiver.MessageReceived += OnMessageReceived;
        }

        public void StartReceiving()
        {
            // Create messaging based on TCP.
            IMessagingSystemFactory aMessagingSystemFactory = new TcpMessagingSystemFactory();
            IDuplexInputChannel anDuplexInputChannel = aMessagingSystemFactory.CreateDuplexInputChannel("tcp://127.0.0.1:8094/");

            // Attach the input channel and be able to receive messages and send back responses.
            myMessageReceiver.AttachDuplexInputChannel(anDuplexInputChannel);
        }

        public void StopReceiving()
        {
            myMessageReceiver.DetachDuplexInputChannel();
        }

        private void OnMessageReceived(object sender, TypedRequestReceivedEventArgs&lt;Person&gt; e)
        {
            Console.WriteLine("Name: " + e.RequestMessage.Name);
            Console.WriteLine("Number of items: " + e.RequestMessage.NumberOfItems.ToString());
            Console.WriteLine();

            if (e.RequestMessage.Name != "bye")
            {
                myMessageReceiver.SendResponseMessage(e.ResponseReceiverId, "Thanks for your message.");
            }
        }


        // Duplex typed message receicer that receives type Person and responses type string.
        private IDuplexTypedMessageReceiver&lt;string, Person&gt; myMessageReceiver;
    }
}
	    </code>
    </codeExample>

    <codeExample>
      Simple client using TCP to send messages. It sends request messages of type Person and receives responses of type string.
      <code language="C#">
using System;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace DuplexTypedMessageClient
{
    public class Person
    {
        public string Name { get; set; }
        public int NumberOfItems { get; set; }
    }

    internal class DuplexPersonSender
    {
        public DuplexPersonSender()
        {
            // Create message sender sending request messages of type Person and receiving responses of type string.
            IDuplexTypedMessagesFactory aTypedMessagesFactory = new DuplexTypedMessagesFactory();
            myMessageSender = aTypedMessagesFactory.CreateDuplexTypedMessageSender&lt;string, Person&gt;();
            myMessageSender.ResponseReceived += OnResponseReceived;

            // Create messaging based on TCP.
            IMessagingSystemFactory aMessagingSystemFactory = new TcpMessagingSystemFactory();
            IDuplexOutputChannel anOutputChannel = aMessagingSystemFactory.CreateDuplexOutputChannel("tcp://127.0.0.1:8094/");

            // Attach output channel and be able to send messages and receive response messages.
            myMessageSender.AttachDuplexOutputChannel(anOutputChannel);
        }

        public void Close()
        {
            myMessageSender.DetachDuplexOutputChannel();
        }

        public void SendPersonalInfo(string name, int numberOfItems)
        {
            Person aPerson = new Person { Name = name, NumberOfItems = numberOfItems };

            // Send the type Person.
            myMessageSender.SendRequestMessage(aPerson);
        }

        private void OnResponseReceived(object sender, TypedResponseReceivedEventArgs&lt;string&gt; e)
        {
            Console.WriteLine(e.ResponseMessage);
        }

        private IDuplexTypedMessageSender&lt;string, Person&gt; myMessageSender;
    }
}
      </code>

    </codeExample>
    
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>