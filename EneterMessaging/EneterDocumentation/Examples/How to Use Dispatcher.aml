<?xml version="1.0" encoding="utf-8"?>
<topic id="18a24899-06a4-4756-97ce-18d853815b5b" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>
      The following example shows how to implement a service receiving messages at the same time via multiple protocols or transportation
      mechanisms.<br/>
      The example implements a service listening to TCP, WebSockets and Shared Memory.
      </para>
      <markup>
		<img src="../media/MultilisteningService.gif" width="100%"/>
	  </markup>
      
    </introduction>
    
    <codeExample>
    The service listening to TCP, WebSockets and Shared Memory.
    <code language="C#">
using System;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.SharedMemoryMessagingSystem;
using Eneter.Messaging.MessagingSystems.SynchronousMessagingSystem;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;
using Eneter.Messaging.MessagingSystems.WebSocketMessagingSystem;
using Eneter.Messaging.Nodes.Dispatcher;

namespace MultiReceivingService
{
    public class RequestData
    {
        public int Number1 { get; set; }
        public int Number2 { get; set; }
    }

    class Program
    {
        // Receiver receiving 'RequestData' and responding 'int'.
        // Note: Duplex typed message receiver can receive messages of specified type
        //       and send response messages of specified type.
        private static IDuplexTypedMessageReceiver&lt;int, RequestData&gt; myReceiver;

        static void Main(string[] args)
        {
            // Create local messaging connecting the dispatcher with the receiver.
            IMessagingSystemFactory aLocalMessaging = new SynchronousMessagingSystemFactory();
            IDuplexInputChannel aLocalInputChannel = 
                aLocalMessaging.CreateDuplexInputChannel("MyLocalAddress");

            IDuplexTypedMessagesFactory aTypedMessagesFactory = new DuplexTypedMessagesFactory();
            myReceiver = aTypedMessagesFactory.CreateDuplexTypedMessageReceiver&lt;int, RequestData&gt;();
            myReceiver.MessageReceived += OnMessageReceived;

            // Attach the local input channel to the receiver and start to receive messages.
            myReceiver.AttachDuplexInputChannel(aLocalInputChannel);


            // Create messaging using WebSocket.
            IMessagingSystemFactory aWebSocketMessaging = new WebSocketMessagingSystemFactory();
            IDuplexInputChannel aWebSocketInputChannel =
                aWebSocketMessaging.CreateDuplexInputChannel("ws://127.0.0.1:8035/MyService/");

            // Create messaging using TCP.
            IMessagingSystemFactory aTcpMessaging = new TcpMessagingSystemFactory();
            IDuplexInputChannel aTcpInputChannel =
                aTcpMessaging.CreateDuplexInputChannel("tcp://127.0.0.1:8036/");

            // Create messaging using Shared Memory.
            IMessagingSystemFactory aSharedMemoryMessaging = new SharedMemoryMessagingSystemFactory();
            IDuplexInputChannel aSharedMemoryInputChannel =
                aSharedMemoryMessaging.CreateDuplexInputChannel("MyService");


            // Create dispatcher that will receive messages via WebSockets, TCP and Shared Memory
            // and forward them to the local address "MyLocalAddress" -&gt; i.e. to our receiver.
            IDuplexDispatcherFactory aDispatcherFactory = new DuplexDispatcherFactory(aLocalMessaging);
            IDuplexDispatcher aDispatcher = aDispatcherFactory.CreateDuplexDispatcher();
            aDispatcher.AddDuplexOutputChannel("MyLocalAddress");

            aDispatcher.AttachDuplexInputChannel(aWebSocketInputChannel);
            Console.WriteLine("Listening to WebSocket.");

            aDispatcher.AttachDuplexInputChannel(aTcpInputChannel);
            Console.WriteLine("Listening to TCP.");

            aDispatcher.AttachDuplexInputChannel(aSharedMemoryInputChannel);
            Console.WriteLine("Listening to SharedMemory.");

            Console.WriteLine("To stop the service press enter ...");
            Console.ReadLine();

            // Stop listening and detach all input channels.
            aDispatcher.DetachDuplexInputChannel();
        }


        // The handler called when a message is received.
        static void OnMessageReceived(object sender, TypedRequestReceivedEventArgs&lt;RequestData&gt; e)
        {
            if (e.ReceivingError == null)
            {
                int aResult = e.RequestMessage.Number1 + e.RequestMessage.Number2;
                Console.WriteLine("{0} + {1} = {2}", e.RequestMessage.Number1, e.RequestMessage.Number2, aResult);

                // Send the result back to the client.
                myReceiver.SendResponseMessage(e.ResponseReceiverId, aResult);
            }
        }
    }
}
    </code>
      </codeExample>

    <codeExample>
    Client using WebSockets.
    <code language="C#">
using System;
using System.Windows.Forms;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.WebSocketMessagingSystem;

namespace WebSocketClient
{
    public partial class Form1 : Form
    {
        // Structure of 2 numbers that will be sent to
        // the service to be calculated.
        public class RequestData
        {
            public int Number1 { get; set; }
            public int Number2 { get; set; }
        }

        // Sender sending 'RequestData' and receiving 'int'.
        private static IDuplexTypedMessageSender&lt;int, RequestData&gt; mySender;

        public Form1()
        {
            InitializeComponent();

            // Create messaging using WebSockets.
            IMessagingSystemFactory aMessaging = new WebSocketMessagingSystemFactory();
            IDuplexOutputChannel anOutputChannel = aMessaging.CreateDuplexOutputChannel("ws://127.0.0.1:8035/MyService/");

            // Create the sender, that sends 'RequestData' and receives 'int'.
            IDuplexTypedMessagesFactory aTypedMessagesFactory = new DuplexTypedMessagesFactory();
            mySender = aTypedMessagesFactory.CreateDuplexTypedMessageSender&lt;int, RequestData&gt;();
            
            // Register the handler receiving the result from the service.
            mySender.ResponseReceived += OnResponseReceived;

            // Attach the duplex output channel and be able to send messages
            // and receive response messages.
            mySender.AttachDuplexOutputChannel(anOutputChannel);
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            mySender.DetachDuplexOutputChannel();
        }

        private void CalculateButton_Click(object sender, EventArgs e)
        {
            // Create the message.
            RequestData aRequestData = new RequestData();
            aRequestData.Number1 = int.Parse(Number1TextBox.Text);
            aRequestData.Number2 = int.Parse(Number2TextBox.Text);

            // Send the message to the service.
            mySender.SendRequestMessage(aRequestData);
        }


        // When a result from the service is received, display it.
        private void OnResponseReceived(object sender, TypedResponseReceivedEventArgs&lt;int&gt; e)
        {
            if (e.ReceivingError == null)
            {
                // Display the result of the calculation.
                // Note: The response message does not come in the UI thread.
                //       Therefore, do not forget to route it if you touch UI controls.
                InvokeInUIThread(() =&gt; ResultTextBox.Text = e.ResponseMessage.ToString());
            }
        }

        // Helper executing the given delegate in the UI thread.
        private void InvokeInUIThread(Action action)
        {
            // If we are not in the UI thread then we must synchronize 
            // via the invoke mechanism.
            if (InvokeRequired)
            {
                Invoke(action);
            }
            else
            {
                action();
            }
        }
    }
}
    </code>
    </codeExample>

    <codeExample>
      Client using TCP.
      <code language="c#">
using System;
using System.Windows.Forms;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace TcpClient
{
    public partial class Form1 : Form
    {
        // Structure of 2 numbers that will be sent to
        // the service to be calculated.
        public class RequestData
        {
            public int Number1 { get; set; }
            public int Number2 { get; set; }
        }

        // Sender sending 'RequestData' and receiving 'int'.
        // Note: Duplex typed message sender can send messages of specified type
        //       and receive response messages of specified type.
        private static IDuplexTypedMessageSender&lt;int, RequestData&gt; mySender;

        public Form1()
        {
            InitializeComponent();

            // Create messaging using TCP.
            IMessagingSystemFactory aTcpMessaging = new TcpMessagingSystemFactory();
            IDuplexOutputChannel anOutputChannel =
                aTcpMessaging.CreateDuplexOutputChannel("tcp://127.0.0.1:8036/");

            //// Create messaging using HTTP.
            //IMessagingSystemFactory anHttpMessaging = new HttpMessagingSystemFactory();
            //IDuplexOutputChannel anOutputChannel = 
            //    anHttpMessaging.CreateDuplexOutputChannel("http://127.0.0.1:8035/MyService/");

            //// Create messaging using Named Pipe.
            //// Note: Do not use '/' at the end of the named pipe address.
            //IMessagingSystemFactory aNamedPipeMessaging = new NamedPipeMessagingSystemFactory();
            //IDuplexOutputChannel anOutputChannel =
            //    aNamedPipeMessaging.CreateDuplexOutputChannel("net.pipe://127.0.0.1/MyService");

            // Create the sender, that sends 'RequestData' and receives 'int'.
            IDuplexTypedMessagesFactory aTypedMessagesFactory = new DuplexTypedMessagesFactory();
            mySender = aTypedMessagesFactory.CreateDuplexTypedMessageSender&lt;int, RequestData&gt;();

            // Register the handler receiving the result from the service.
            mySender.ResponseReceived += OnResponseReceived;

            // Attach the TCP duplex output channel and be able to send messages
            // and receive response messages.
            mySender.AttachDuplexOutputChannel(anOutputChannel);
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            mySender.DetachDuplexOutputChannel();
        }

        private void CalculateButton_Click(object sender, EventArgs e)
        {
            // Create the message.
            RequestData aRequestData = new RequestData();
            aRequestData.Number1 = int.Parse(Number1TextBox.Text);
            aRequestData.Number2 = int.Parse(Number2TextBox.Text);

            // Send the message to the service.
            mySender.SendRequestMessage(aRequestData);
        }

        // When a result from the service is received, display it.
        private void OnResponseReceived(object sender, TypedResponseReceivedEventArgs&lt;int&gt; e)
        {
            if (e.ReceivingError == null)
            {
                // Display the result of the calculation.
                // Note: The response message does not come in the UI thread.
                //       Therefore, do not forget to route it if you touch UI controls.
                InvokeInUIThread(() =&gt; ResultTextBox.Text = e.ResponseMessage.ToString());
            }
        }

        // Helper executing the given delegate in the UI thread.
        private void InvokeInUIThread(Action action)
        {
            // If we are not in the UI thread then we must synchronize 
            // via the invoke mechanism.
            if (InvokeRequired)
            {
                Invoke(action);
            }
            else
            {
                action();
            }
        }
    }
}
      </code>
    </codeExample>

    <codeExample>
      Client using shared memory.
      <code language="c#">
using System;
using System.Windows.Forms;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.SharedMemoryMessagingSystem;

namespace SharedMemoryClient
{
    public partial class Form1 : Form
    {
        // Structure of 2 numbers that will be sent to
        // the service to be calculated.
        public class RequestData
        {
            public int Number1 { get; set; }
            public int Number2 { get; set; }
        }

        // Sender sending 'RequestData' and receiving 'int'.
        private static IDuplexTypedMessageSender&lt;int, RequestData&gt; mySender;

        public Form1()
        {
            InitializeComponent();

            // Create messaging using Shared Memory.
            IMessagingSystemFactory aMessaging = new SharedMemoryMessagingSystemFactory();
            IDuplexOutputChannel anOutputChannel = 
                aMessaging.CreateDuplexOutputChannel("MyService");

            // Create the sender, that sends 'RequestData' and receives 'int'.
            IDuplexTypedMessagesFactory aTypedMessagesFactory = new DuplexTypedMessagesFactory();
            mySender = aTypedMessagesFactory.CreateDuplexTypedMessageSender&lt;int, RequestData&gt;();

            // Register the handler receiving the result from the service.
            mySender.ResponseReceived += OnResponseReceived;

            // Attach the Named duplex output channel and be able to send messages
            // and receive response messages.
            mySender.AttachDuplexOutputChannel(anOutputChannel);
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            mySender.DetachDuplexOutputChannel();
        }

        private void CalculateButton_Click(object sender, EventArgs e)
        {
            // Create the message.
            RequestData aRequestData = new RequestData();
            aRequestData.Number1 = int.Parse(Number1TextBox.Text);
            aRequestData.Number2 = int.Parse(Number2TextBox.Text);

            // Send the message to the service.
            mySender.SendRequestMessage(aRequestData);
        }

        // When a result from the service is received, display it.
        private void OnResponseReceived(object sender, TypedResponseReceivedEventArgs&lt;int&gt; e)
        {
            if (e.ReceivingError == null)
            {
                // Display the result of the calculation.
                // Note: The response message does not come in the UI thread.
                //       Therefore, do not forget to route it if you touch UI controls.
                InvokeInUIThread(() =&gt; ResultTextBox.Text = e.ResponseMessage.ToString());
            }
        }

        // Helper executing the given delegate in the UI thread.
        private void InvokeInUIThread(Action action)
        {
            // If we are not in the UI thread then we must synchronize 
            // via the invoke mechanism.
            if (InvokeRequired)
            {
                Invoke(action);
            }
            else
            {
                action();
            }
        }
    }
}

      </code>
    </codeExample>
    
    
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>