<?xml version="1.0" encoding="utf-8"?>
<topic id="9a961e93-8bb7-4d1e-940d-2fde845a5f55" revisionNumber="1">
  <developerHowToDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>
        The example shows how setup the communication for the unstable network.
      </para>
      <para>
        The example uses monitored messaging and buffered messaging. The monitored messaging constantly monitors the connection
        and the buffered messaging stores sent messages in a buffer and tries to recover the connection.
        When the connection is recovered it sends stored messages.
      </para>
      <para>
        To exercise the example, you can try the following steps:
      </para>
	  <list class="ordered">
  		<listItem><para>Start client and service.</para></listItem>
  		<listItem><para>Stop the service.</para></listItem>
  		<listItem><para>Invoke the calculation request in the client. (the request will be buffered)</para></listItem>
  		<listItem><para>Start the service again. The client will automatically reconnect and complete the request.</para></listItem>
	  </list>

    </introduction>

    <codeExample>
    Server side:
    <code language="C#">
using System;
using Eneter.Messaging.DataProcessing.Serializing;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.Composites;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace CalculatorService
{
    // Data type transferring numbers to be calculated.
    public class RequestMsg
    {
        public int Number1;
        public int Number2;
    }

    class Program
    {
        // Receiver receiving request to calculate two numbers and returning the result.
        static private IDuplexTypedMessageReceiver&lt;int, RequestMsg&gt; myReceiver;

        static void Main(string[] args)
        {
            // Create TCP messaging that will be used by the buffered and monitored messaging
            // to receive messages and send response messages.
            IMessagingSystemFactory anUnderlyingMessaging = new TcpMessagingSystemFactory();

            // Create buffered and monitored messaging.
            // This messaging will actively monitor the connection and in case of disconnection,
            // it will buffer sent messages while not reconnect.
            // Then, when the connection is reopen, the buffered messages will be sent.
            IMessagingSystemFactory aBufferedMessaging = new BufferedMonitoredMessagingFactory(
                anUnderlyingMessaging,              // underying TCP messaging
                TimeSpan.FromMilliseconds(60000),   // maximum time, the messaging can work offline
                TimeSpan.FromMilliseconds(500),     // 'ping' frequency - not applicable for receiver
                TimeSpan.FromMilliseconds(3000)     // maximum time without ping. If this time is exceeded,
                                                    // the sent response messages will be buffered.
                );

            // Create the duplex input channel, that will listen on the desired address.
            IDuplexInputChannel anInputChannel = aBufferedMessaging.CreateDuplexInputChannel("tcp://127.0.0.1:8034/");

            // Create message receiver - response sender.
            IDuplexTypedMessagesFactory aSenderFactory = new DuplexTypedMessagesFactory();
            myReceiver = aSenderFactory.CreateDuplexTypedMessageReceiver&lt;int, RequestMsg&gt;();
            myReceiver.MessageReceived += OnMessageReceived;

            Console.WriteLine("Calculator service is listening.");

            // Attach the duplex input channel and start listening.
            myReceiver.AttachDuplexInputChannel(anInputChannel);

            Console.ReadLine();

            // Stop listening.
            myReceiver.DetachDuplexInputChannel();
        }

        // Request 
        static private void OnMessageReceived(object sender, TypedRequestReceivedEventArgs&lt;RequestMsg&gt; e)
        {
            // Calculate incoming 2 numbers.
            if (e.ReceivingError == null)
            {
                int aResult = e.RequestMessage.Number1 + e.RequestMessage.Number2;

                Console.WriteLine("{0} + {1} = {2}", e.RequestMessage.Number1, e.RequestMessage.Number2, aResult);

                // Send the result back.
                myReceiver.SendResponseMessage(e.ResponseReceiverId, aResult);
            }
        }
    }
}
    </code>
    
    Client side:
    <code language="C#">
using System;
using System.Windows.Forms;
using Eneter.Messaging.DataProcessing.Serializing;
using Eneter.Messaging.EndPoints.TypedMessages;
using Eneter.Messaging.MessagingSystems.Composites;
using Eneter.Messaging.MessagingSystems.MessagingSystemBase;
using Eneter.Messaging.MessagingSystems.TcpMessagingSystem;

namespace CalculatorSender
{
    public partial class Form1 : Form
    {
        // Data type transferring numbers to be calculated.
        public class RequestMsg
        {
            public int Number1;
            public int Number2;
        }

        // Sender sending the request to calculate two numbers.
        private IDuplexTypedMessageSender&lt;int, RequestMsg&gt; mySender;

        public Form1()
        {
            InitializeComponent();

            OpenConnection();
        }

        private void OpenConnection()
        {
            // Create TCP messaging that will be used by the buffered and monitored messaging
            // to send messages and receive response messages.
            IMessagingSystemFactory anUnderlyingMessaging = new TcpMessagingSystemFactory();

            // Create buffered and monitored messaging.
            // This messaging will actively monitor the connection and in case of disconnection,
            // it will buffer sent messages and will try to reconnect.
            // Then, when the connection is reopen, the buffered messages will be sent.
            IMessagingSystemFactory aBufferedMessaging = new BufferedMonitoredMessagingFactory(
                anUnderlyingMessaging,          // underying TCP messaging
                TimeSpan.FromMinutes(1),        // maximum time, the messaging can work offline
                TimeSpan.FromMilliseconds(500), // 'ping' frequency
                TimeSpan.FromMilliseconds(1000) // The maximum time without the ping response.
                                                // If this time is exceeded, the sent messages will be buffered
                                                // it will try to reconnect.
                );

            IDuplexOutputChannel anOutputChannel = aBufferedMessaging.CreateDuplexOutputChannel("tcp://127.0.0.1:8034/");

            // Create message sender - response receiver.
            IDuplexTypedMessagesFactory aSenderFactory = new DuplexTypedMessagesFactory();
            mySender = aSenderFactory.CreateDuplexTypedMessageSender&lt;int, RequestMsg&gt;();
            mySender.ResponseReceived += OnResponseReceived;

            // Attach duplex output channel and be able to send messages and receive response messages.
            mySender.AttachDuplexOutputChannel(anOutputChannel);
        }

        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            // Stop listening - if the listening is not stopped, the thread will block the closing of the application.
            mySender.DetachDuplexOutputChannel();
        }


        private void SendBtn_Click(object sender, EventArgs e)
        {
            // Create the request message.
            RequestMsg aMessage = new RequestMsg();
            aMessage.Number1 = int.Parse(Number1TextBox.Text);
            aMessage.Number2 = int.Parse(Number2TextBox.Text);

            // Send the message.
            // Note: If the connection is not available, the message will be stored in the buffer.
            //       We have set, the application can work offline maximum 1 minute.
            mySender.SendRequestMessage(aMessage);
        }

        private void OnResponseReceived(object sender, TypedResponseReceivedEventArgs&lt;int&gt; e)
        {
            if (e.ReceivingError == null)
            {
                int aResult = e.ResponseMessage;

                // Use UI thread to display the result.
                InvokeInUiThread(() =&gt; ResultTextBox.Text = aResult.ToString());
            }
        }

        private void InvokeInUiThread(Action action)
        {
            if (InvokeRequired)
            {
                Invoke(action);
            }
            else
            {
                action();
            }
        }
    }
}
    </code>
    
    
    </codeExample>
    
    
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>