<?xml version="1.0" encoding="utf-8"?>
<topic id="74b87637-0a7c-4403-8fc9-75500d6e95b2" revisionNumber="1">
  <developerHowToDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <para>Simple example showing how to use RPC</para>
      <para>
        The example implements a simple request-response communication using RPC (Remote Procedure Calls).
        The service is a simple console application exposing the interface to calculate numbers.
        The client uses the exposed interface to call remote methods in the service.
      </para>
    </introduction>

    <codeExample>
      Exposed service interface:
      <code language="c#">
        // Exposed service interface.
        public interface ICalculator
        {
            double Sum(double a, double b);
            double Subtract(double a, double b);
            double Multiplay(double a, double b);
            double Divide(double a, double b);
        }
      </code>
      
      Service side:
      <code language="c#">
    // Implementation of the service logic.
    internal class Calculator : ICalculator
    {
        public double Sum(double a, double b)
        {
            return a + b;
        }

        public double Subtract(double a, double b)
        {
            return a - b;
        }

        public double Multiplay(double a, double b)
        {
            return a * b;
        }

        public double Divide(double a, double b)
        {
            return a / b;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            // Instantiate service.
            Calculator aCalculator = new Calculator();
            IRpcFactory anRpcFactory = new RpcFactory();
            IRpcService&lt;ICalculator&gt; aService = anRpcFactory.CreateSingleInstanceService&lt;ICalculator&gt;(aCalculator);

            // Attach input channel and start listening.
            IMessagingSystemFactory aMessaging = new TcpMessagingSystemFactory();
            IDuplexInputChannel anInputChannel = aMessaging.CreateDuplexInputChannel("tcp://127.0.0.1:8045/");
            aService.AttachDuplexInputChannel(anInputChannel);

            Console.WriteLine("Calculator service started. Press ENTER to stop.");
            Console.ReadLine();

            // Detach input channel and stop listening.
            // Note: it releases the listening thread.
            aService.DetachDuplexInputChannel();
        }
    }
      </code>
      
      Client side:
      <code language="c#">
    public partial class Form1 : Form
    {
        private IRpcClient&lt;ICalculator&gt; myRpcClient;

        public Form1()
        {
            InitializeComponent();

            // Get RPC client.
            IRpcFactory anRpcFactory = new RpcFactory();
            myRpcClient = anRpcFactory.CreateClient&lt;ICalculator&gt;();

            // Attach output channel and be able to communicate.
            TcpMessagingSystemFactory aMessaging = new TcpMessagingSystemFactory();
            IDuplexOutputChannel anOutputChannel = aMessaging.CreateDuplexOutputChannel("tcp://127.0.0.1:8045/");
            myRpcClient.AttachDuplexOutputChannel(anOutputChannel);
        }


        private void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            // Stop listening by detaching the input channel.
            myRpcClient.DetachDuplexOutputChannel();
        }

        private void CalculateButton_Click(object sender, EventArgs e)
        {
            double a = double.Parse(Number1TextBox.Text);
            double b = double.Parse(Number2TextBox.Text);
            myRpcClient.Proxy.Sum(a, b).ToString();
        }
         
        private void SubtractButton_Click(object sender, EventArgs e)
        {
            double a = double.Parse(Number1TextBox.Text);
            double b = double.Parse(Number2TextBox.Text);
            ResultLabel.Text = myRpcClient.Proxy.Subtract(a, b).ToString();
        }

        private void MultiplyButton_Click(object sender, EventArgs e)
        {
            double a = double.Parse(Number1TextBox.Text);
            double b = double.Parse(Number2TextBox.Text);
            ResultLabel.Text = myRpcClient.Proxy.Multiplay(a, b).ToString();
        }

        private void DivideButton_Click(object sender, EventArgs e)
        {
            double a = double.Parse(Number1TextBox.Text);
            double b = double.Parse(Number2TextBox.Text);
            ResultLabel.Text = myRpcClient.Proxy.Divide(a, b).ToString();
        }
    }
        
      </code>
    </codeExample>
      
    
    <!-- <codeExample>Optional code example</codeExample> -->
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerHowToDocument>
</topic>
